<html>
	<head>
		<meta charset="utf-8">
		
		<!-- Google fonts -->
		<link href='https://fonts.googleapis.com/css?family=Open+Sans:300' rel='stylesheet' type='text/css'>
		<link href='https://fonts.googleapis.com/css?family=Poiret+One' rel='stylesheet' type='text/css'>
		
		<style>

		body {
				font-family: 'Open Sans', sans-serif;
				text-align: center;
				font-weight: 300;
			}
	  	.title {
		    	font-size: 30px;
		    	color: #4F4F4F;
		  	}

		.subtitle {
		    	font-size: 14px;
		    	color: #AAAAAA;
				padding-bottom: 15px;
		  	}
		.geo-path {
				stroke: white;
				stroke-width: 0.5px;
				stroke-opacity: 1;
				fill: #C0AA91;
				fill-opacity: 1;
			}
		.cities,  .cityCover{
				fill: #1A818C;
			}
		</style>
	
		
		<!-- D3.js -->
		<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js" charset="utf-8"></script>

	</head>	


	<body>

		<div class="title">The 150 largest Cities in the World</div>
		<div class="subtitle">sized to population</div>		
		<div id="chart"></div>
		
		<script src="countriesMap.js"></script>
		<script src="populations.js"></script>

		<script language="javascript" type="text/javascript">

			///////////////////////////////////////////////////////////////////////////
			//////////////////// Set up and initiate svg containers ///////////////////
			///////////////////////////////////////////////////////////////////////////	

			var margin  = {
				top: 100,
				right: 0,
				bottom: 0,
				left: 0
			};
			var width = 960 - margin.left - margin.right,
				height = 600 - margin.top - margin.bottom;

			//SVG container
			var svg = d3.select('#chart')
				.append("svg")
				.attr("width", width + margin.left + margin.right)
				.attr("height", height + margin.top + margin.bottom)
				// .append("g")
				// .attr("transform", "translate(" + (margin.left) + "," + (margin.top) + ")");

			///////////////////////////////////////////////////////////////////////////
			///////////////////////////// Create filter ///////////////////////////////
			///////////////////////////////////////////////////////////////////////////	

			//SVG filter for the gooey effect
			//Code taken from http://tympanus.net/codrops/2015/03/10/creative-gooey-effects/
			var defs = svg.append("defs");
			var filter = defs.append("filter").attr("id","gooeyCodeFilter");
			filter.append("feGaussianBlur")
				.attr("in","SourceGraphic")
				.attr("stdDeviation","10")
				//to fix safari: http://stackoverflow.com/questions/24295043/svg-gaussian-blur-in-safari-unexpectedly-lightens-image
				.attr("color-interpolation-filters","sRGB") 
				.attr("result","blur");
			filter.append("feColorMatrix")
				.attr("class", "blurValues")
				.attr("in","blur")
				.attr("mode","matrix")
				.attr("values","1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -5")
				.attr("result","gooey");
			filter.append("feBlend")
				.attr("in","SourceGraphic")
				.attr("in2","gooey")
				.attr("operator","atop");

		 	///////////////////////////////////////////////////////////////////////////
			//////////////////////////// Set-up Map /////////////////////////////////
			/////////////////////////////////////////////////////////////////////////// 

			//Variables for the map
			var projection = d3.geo.mercator()
					.scale(170)
					.translate([480,230]);

			var path = d3.geo.path()
					.projection(projection);
	
			var map = svg.append("g")
						.attr("class", "map");

			//Initiate the world map
			map.selectAll(".geo-path")
				.data(countriesMap[0].features)
				.enter().append("path")
					.attr("class", function(d) { return "geo-path" + " " + d.id; })
					.attr("id", function(d) { return d.properties.name; })
					.attr("d", path)
					.style("stroke-opacity", 1)
					.style("fill-opacity", 0.5);

			///////////////////////////////////////////////////////////////////////////
			//////////////////////////////// Cities ///////////////////////////////////
			/////////////////////////////////////////////////////////////////////////// 

			//Radius scale
			var rScale = d3.scale.sqrt()
				.range([0,14])
				.domain([0, d3.max(populations, function(d) { return d.population; })]);


			//Wrapper for the cities
			var cityWrapper = svg.append("g")
				.attr("class", "cityWrapper")
				.style("filter", "url(#gooeyCodeFilter)");

			//Place the city circles
			var cities = cityWrapper.selectAll(".cities")
				.data(populations)
				.enter().append("circle")
				.attr("class", "cities")
				.attr("r", function(d) { return d.radius ;})
				.attr("cx", projection([0,0])[0])
				.attr("cy", projection([0,0])[1])
				.style("opacity", 1);

			var coverCirleRadius = 40;
			//Circle over all others
			cityWrapper.append("circle")
				.attr("class", "cityCover")
				.attr("r", coverCirleRadius)
				.attr("cx", projection([0,0])[0])
				.attr("cy", projection([0,0])[1]);

		 	//////////////////////////////////////////////////////////////////////////
			/////////////////////////// Country Labels ////////////////////////////////
			/////////////////////////////////////////////////////////////////////////// 

			//Calculate the centers for each country
			var centers = getCenters("country", [width, height/0.8]);
			centers.forEach(function(d) {
					d.y = d.y - 100;
					d.x = d.x + 0;
			});//centers forEach

			//Wrapper for the country labels
			var labelWrapper = svg.append("g")
				.attr("class", "labelWrapper");
				
			//Append the country labels
		    labelWrapper.selectAll(".label")
		      	.data(centers)
		      	.enter().append("text")
		      	.attr("class", "label")
		      	.style("opacity", 0)
		      	.attr("transform", function (d) { return "translate(" + (d.x) + ", " + (d.y - 60) + ")"; })
		      	.text(function (d) { return d.name });
		</script>
	</body>
</html>